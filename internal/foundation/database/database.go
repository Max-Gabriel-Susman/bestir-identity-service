package database

import (
	"fmt"
	"log"
	"math/rand"
	"time"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

// Account is our model, which corresponds to the "accounts" table
type Account struct {
	ID      uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4()"`
	Balance int
}

// The `acctIDs` global variable tracks the random IDs generated by `addAccounts`
var acctIDs []uuid.UUID

// Insert new rows into the "accounts" table
// This function generates new UUIDs and random balances for each row, and
// then it appends the ID to the `acctIDs`, which other functions use to track the IDs
func addAccounts(db *gorm.DB, numRows int, transferAmount int) error {
	log.Printf("Creating %d new accounts...", numRows)
	for i := 0; i < numRows; i++ {
		newID := uuid.New()
		newBalance := rand.Intn(10000) + transferAmount
		if err := db.Create(&Account{ID: newID, Balance: newBalance}).Error; err != nil {
			return err
		}
		acctIDs = append(acctIDs, newID)
	}
	log.Println("Accounts created.")
	return nil
}

// Transfer funds between accounts
// This function adds `amount` to the "balance" column of the row with the "id" column matching `toID`,
// and removes `amount` from the "balance" column of the row with the "id" column matching `fromID`
func transferFunds(db *gorm.DB, fromID uuid.UUID, toID uuid.UUID, amount int) error {
	log.Printf("Transferring %d from account %s to account %s...", amount, fromID, toID)
	var fromAccount Account
	var toAccount Account

	db.First(&fromAccount, fromID)
	db.First(&toAccount, toID)

	if fromAccount.Balance < amount {
		return fmt.Errorf("account %s balance %d is lower than transfer amount %d", fromAccount.ID, fromAccount.Balance, amount)
	}

	fromAccount.Balance -= amount
	toAccount.Balance += amount

	if err := db.Save(&fromAccount).Error; err != nil {
		return err
	}
	if err := db.Save(&toAccount).Error; err != nil {
		return err
	}
	log.Println("Funds transferred.")
	return nil
}

// Print IDs and balances for all rows in "accounts" table
func printBalances(db *gorm.DB) {
	var accounts []Account
	db.Find(&accounts)
	fmt.Printf("Balance at '%s':\n", time.Now())
	for _, account := range accounts {
		fmt.Printf("%s %d\n", account.ID, account.Balance)
	}
}

// Delete all rows in "accounts" table inserted by `main` (i.e., tracked by `acctIDs`)
func deleteAccounts(db *gorm.DB, accountIDs []uuid.UUID) error {
	log.Println("Deleting accounts created...")
	err := db.Where("id IN ?", accountIDs).Delete(Account{}).Error
	if err != nil {
		return err
	}
	log.Println("Accounts deleted.")
	return nil
}
